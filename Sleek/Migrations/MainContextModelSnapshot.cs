// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sleek.Models;

namespace Sleek.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sleek.Models.Activity", b =>
                {
                    b.Property<int>("ActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("act_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActCusid")
                        .HasColumnName("act_cusid");

                    b.Property<DateTime?>("ActDate")
                        .HasColumnName("act_date")
                        .HasColumnType("datetime");

                    b.Property<string>("ActDescription")
                        .IsRequired()
                        .HasColumnName("act_description")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("ActType")
                        .IsRequired()
                        .HasColumnName("act_type")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("ActUsrid")
                        .HasColumnName("act_usrid");

                    b.HasKey("ActId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Sleek.Models.Customer", b =>
                {
                    b.Property<int>("CusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cus_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CusAddress1")
                        .HasColumnName("cus_address1")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CusAddress2")
                        .HasColumnName("cus_address2")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CusCity")
                        .HasColumnName("cus_city")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CusCompany")
                        .HasColumnName("cus_company")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CusEmail")
                        .HasColumnName("cus_email")
                        .HasMaxLength(160)
                        .IsUnicode(false);

                    b.Property<string>("CusFax")
                        .HasColumnName("cus_fax")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CusFirst")
                        .HasColumnName("cus_first")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CusLast")
                        .HasColumnName("cus_last")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CusNote")
                        .HasColumnName("cus_note")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("CusNumber")
                        .HasColumnName("cus_number")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CusPassword")
                        .HasColumnName("cus_password")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("CusPhone")
                        .HasColumnName("cus_phone")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("CusStaid")
                        .HasColumnName("cus_staid");

                    b.Property<string>("CusState")
                        .HasColumnName("cus_state")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CusZip")
                        .HasColumnName("cus_zip")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("CusZip4")
                        .HasColumnName("cus_zip4")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.HasKey("CusId");

                    b.HasIndex("CusStaid")
                        .IsUnique()
                        .HasFilter("[cus_staid] IS NOT NULL");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Sleek.Models.Order", b =>
                {
                    b.Property<int>("OrdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ord_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrdComments")
                        .HasColumnName("ord_comments")
                        .IsUnicode(false);

                    b.Property<int>("OrdCusid")
                        .HasColumnName("ord_cusid");

                    b.Property<DateTime?>("OrdDate")
                        .HasColumnName("ord_date")
                        .HasColumnType("datetime");

                    b.Property<string>("OrdDescription")
                        .HasColumnName("ord_description")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int>("OrdProid")
                        .HasColumnName("ord_proid");

                    b.Property<int>("OrdStaid")
                        .HasColumnName("ord_staid");

                    b.Property<string>("OrdSubject")
                        .HasColumnName("ord_subject")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("OrdUsrid")
                        .HasColumnName("ord_usrid");

                    b.HasKey("OrdId");

                    b.HasIndex("OrdCusid");

                    b.HasIndex("OrdProid");

                    b.HasIndex("OrdStaid")
                        .IsUnique();

                    b.HasIndex("OrdUsrid");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Sleek.Models.Project", b =>
                {
                    b.Property<int>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pro_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProCusid")
                        .HasColumnName("pro_cusid");

                    b.Property<DateTime?>("ProDate")
                        .IsRequired()
                        .HasColumnName("pro_date")
                        .HasColumnType("datetime");

                    b.Property<string>("ProDescription")
                        .IsRequired()
                        .HasColumnName("pro_description")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("ProLocalpath")
                        .HasColumnName("pro_localpath")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("ProRemotepath")
                        .HasColumnName("pro_remotepath")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("ProSourcepath")
                        .HasColumnName("pro_sourcepath")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int>("ProStaid")
                        .HasColumnName("pro_staid");

                    b.Property<int>("ProUsrid")
                        .HasColumnName("pro_usrid");

                    b.HasKey("ProId");

                    b.HasIndex("ProCusid");

                    b.HasIndex("ProStaid")
                        .IsUnique();

                    b.HasIndex("ProUsrid");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Sleek.Models.Request", b =>
                {
                    b.Property<int>("ReqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("req_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReqAddress")
                        .HasColumnName("req_address")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ReqCity")
                        .HasColumnName("req_city")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ReqContent")
                        .IsRequired()
                        .HasColumnName("req_content")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ReqDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("req_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReqEmail")
                        .IsRequired()
                        .HasColumnName("req_email")
                        .HasMaxLength(160)
                        .IsUnicode(false);

                    b.Property<string>("ReqFirst")
                        .IsRequired()
                        .HasColumnName("req_first")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ReqLast")
                        .IsRequired()
                        .HasColumnName("req_last")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ReqPhone")
                        .HasColumnName("req_phone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("ReqState")
                        .HasColumnName("req_state")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ReqSubject")
                        .IsRequired()
                        .HasColumnName("req_subject")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("ReqType")
                        .IsRequired()
                        .HasColumnName("req_type")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ReqZip")
                        .HasColumnName("req_zip")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("ReqId")
                        .HasName("PK_Requests");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Sleek.Models.Status", b =>
                {
                    b.Property<int>("StaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sta_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StaCode")
                        .IsRequired()
                        .HasColumnName("sta_code")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("StaDescription")
                        .IsRequired()
                        .HasColumnName("sta_description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("StaId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Sleek.Models.User", b =>
                {
                    b.Property<int>("UsrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("usr_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UsrCusid")
                        .HasColumnName("usr_cusid");

                    b.Property<string>("UsrEmail")
                        .HasColumnName("usr_email")
                        .HasMaxLength(160)
                        .IsUnicode(false);

                    b.Property<string>("UsrFirst")
                        .HasColumnName("usr_first")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UsrLast")
                        .HasColumnName("usr_last")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UsrName")
                        .HasColumnName("usr_name")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("UsrNote")
                        .HasColumnName("usr_note")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("UsrPassword")
                        .HasColumnName("usr_password")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UsrRole")
                        .HasColumnName("usr_role")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("UsrStaid")
                        .HasColumnName("usr_staid");

                    b.Property<string>("UsrTitle")
                        .HasColumnName("usr_title")
                        .HasMaxLength(30);

                    b.Property<string>("UsrToken")
                        .HasColumnName("usr_token")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UsrTokendate")
                        .HasColumnName("usr_tokendate")
                        .HasColumnType("datetime");

                    b.HasKey("UsrId");

                    b.HasIndex("UsrCusid");

                    b.HasIndex("UsrStaid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Sleek.Models.Customer", b =>
                {
                    b.HasOne("Sleek.Models.Status", "Status")
                        .WithOne("Customer")
                        .HasForeignKey("Sleek.Models.Customer", "CusStaid");
                });

            modelBuilder.Entity("Sleek.Models.Order", b =>
                {
                    b.HasOne("Sleek.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("OrdCusid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sleek.Models.Project", "Project")
                        .WithMany("Orders")
                        .HasForeignKey("OrdProid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sleek.Models.Status", "Status")
                        .WithOne("Order")
                        .HasForeignKey("Sleek.Models.Order", "OrdStaid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sleek.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("OrdUsrid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sleek.Models.Project", b =>
                {
                    b.HasOne("Sleek.Models.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("ProCusid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sleek.Models.Status", "Status")
                        .WithOne("Project")
                        .HasForeignKey("Sleek.Models.Project", "ProStaid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sleek.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("ProUsrid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sleek.Models.User", b =>
                {
                    b.HasOne("Sleek.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("UsrCusid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sleek.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("UsrStaid");
                });
#pragma warning restore 612, 618
        }
    }
}
